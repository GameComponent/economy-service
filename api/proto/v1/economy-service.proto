syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Economy service";
		version: "0.0";
		contact: {
			name: "economy-service";
			url: "https://github.com/GameComponent/economy-service";
			email: "info@gamecomponent.com";
		};
	};
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

// Service definition
service EconomyService {
	// To see what Storages belong to an User
	rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse) {
		option (google.api.http) = {
			get: "/v1/player/{player_id}"
		};
	}

	// Create a player
	rpc CreatePlayer(CreatePlayerRequest) returns (CreatePlayerResponse) {
		option (google.api.http) = {
			post: "/v1/player"
			body: "*"
		};
	}

	// List all players
	rpc ListPlayer(ListPlayerRequest) returns (ListPlayerResponse) {
		option (google.api.http) = {
			get: "/v1/player"
		};
	}

	// Search player
	rpc SearchPlayer(SearchPlayerRequest) returns (SearchPlayerResponse) {
		option (google.api.http) = {
			post: "/v1/player/search"
			body: "*"
		};
	}

	// Get the contents of a storage
	rpc GetStorage(GetStorageRequest) returns (GetStorageResponse) {
		option (google.api.http) = {
			get: "/v1/storage/{storage_id}"
		};
	}

	// List all storages
	rpc ListStorage(ListStorageRequest) returns (ListStorageResponse) {
		option (google.api.http) = {
			get: "/v1/storage"
		};
	}
	
	// Create a new Storage
	rpc CreateStorage(CreateStorageRequest) returns (CreateStorageResponse) {
		option (google.api.http) = {
			post: "/v1/storage"
			body: "*"
		};
	}

	// Create an Item
	rpc CreateItem(CreateItemRequest) returns (CreateItemResponse) {
		option (google.api.http) = {
			post: "/v1/item"
			body: "*"
		};
	}

	// Update an Item
	rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse) {
		option (google.api.http) = {
			patch: "/v1/item"
			body: "*"
		};
	}

	// Get an Item
	rpc GetItem(GetItemRequest) returns (GetItemResponse) {
		option (google.api.http) = {
			get: "/v1/item/{item_id}"
		};
	}

	// List all Items
	rpc ListItem(ListItemRequest) returns (ListItemResponse) {
		option (google.api.http) = {
			get: "/v1/item"
		};
	}

	// Search item
	rpc SearchItem(SearchItemRequest) returns (SearchItemResponse) {
		option (google.api.http) = {
			post: "/v1/item/search"
			body: "*"
		};
	}

	// Give Item to a Storage
	rpc GiveItem(GiveItemRequest) returns (GiveItemResponse) {
		option (google.api.http) = {
			post: "/v1/storage/give/item"
			body: "*"
		};
	}

	// Create a currency
	rpc CreateCurrency(CreateCurrencyRequest) returns (CreateCurrencyResponse) {
		option (google.api.http) = {
			post: "/v1/currency"
			body: "*"
		};
	}

	// Get a currency
	rpc GetCurrency(GetCurrencyRequest) returns (GetCurrencyResponse) {
		option (google.api.http) = {
			get: "/v1/currency/{currency_id}"
		};
	}

	// Shows all currencies
	rpc ListCurrency(ListCurrencyRequest) returns (ListCurrencyResponse) {
		option (google.api.http) = {
			get: "/v1/currency"
		};
	}

	// Give an amount of Currency to a Storage
	rpc GiveCurrency(GiveCurrencyRequest) returns (GiveCurrencyResponse) {
		option (google.api.http) = {
			post: "/v1/storage/give/currency"
			body: "*"
		};
	}

	// Set a config
	rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {
		option (google.api.http) = {
			post: "/v1/config"
			body: "*"
		};
	}

	// Get a config
	rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
		option (google.api.http) = {
			get: "/v1/config/{key}"
		};
	}

	// List all configs
	rpc ListConfig(ListConfigRequest) returns (ListConfigResponse) {
		option (google.api.http) = {
			get: "/v1/config"
		};
	}

	// Authenticate an account
	rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
		option (google.api.http) = {
			post: "/v1/authenticate"
			body: "*"
		};
	}

	// Register an account
	rpc Register(RegisterRequest) returns (RegisterResponse) {
		option (google.api.http) = {
			post: "/v1/register"
			body: "*"
		};
	}

	// Get a shop
	rpc GetShop(GetShopRequest) returns (GetShopResponse) {
		option (google.api.http) = {
			get: "/v1/shop/{shop_id}"
		};
	}

	// Create a shop
	rpc CreateShop(CreateShopRequest) returns (CreateShopResponse) {
		option (google.api.http) = {
			post: "/v1/shop"
			body: "*"
		};
	}	

	// List all shops
	rpc ListShop(ListShopRequest) returns (ListShopResponse) {
		option (google.api.http) = {
			get: "/v1/shop"
		};
	}

	// Create a product
	rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {
		option (google.api.http) = {
			post: "/v1/product"
			body: "*"
		};
	}	

	// List all product
	rpc ListProduct(ListProductRequest) returns (ListProductResponse) {
		option (google.api.http) = {
			get: "/v1/product"
		};
	}

	// Get a product
	rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
		option (google.api.http) = {
			get: "/v1/product/{product_id}"
		};
	}

	// Buy product from the store
	rpc BuyProduct(BuyProductRequest) returns (BuyProductResponse) {
		option (google.api.http) = {
			post: "/v1/product/buy"
			body: "*"
		};
	}	

	// Attach item to a product
	rpc AttachItem(AttachItemRequest) returns (AttachItemResponse) {
		option (google.api.http) = {
			post: "/v1/product/attach/item"
			body: "*"
		};
	}	

	// Detach item from a product
	rpc DetachItem(DetachItemRequest) returns (DetachItemResponse) {
		option (google.api.http) = {
			delete: "/v1/product/detach/item/{product_item_id}"
		};
	}	

	// Get a Price
	rpc GetPrice(GetPriceRequest) returns (GetPriceResponse) {
		option (google.api.http) = {
			get: "/v1/price/{price_id}"
		};
	}

	// Create a price
	rpc CreatePrice(CreatePriceRequest) returns (CreatePriceResponse) {
		option (google.api.http) = {
			post: "/v1/price"
			body: "*"
		};
	}

	// Create a price
	rpc ListProductPrice(ListProductPriceRequest) returns (ListProductPriceResponse) {
		option (google.api.http) = {
			get: "/v1/product/{product_id}/price"
		};
	}

	// Attach currency to a Price
	rpc AttachPriceCurrency(AttachPriceCurrencyRequest) returns (AttachPriceCurrencyResponse) {
		option (google.api.http) = {			
			post: "/v1/price/attach/currency"
			body: "*"
		};
	}	

	// Detach currency from a Price
	rpc DetachPriceCurrency(DetachPriceCurrencyRequest) returns (DetachPriceCurrencyResponse) {
		option (google.api.http) = {
			delete: "/v1/price/detach/currency/{price_currency_id}"
		};
	}

	// Attach item to a Price
	rpc AttachPriceItem(AttachPriceItemRequest) returns (AttachPriceItemResponse) {
		option (google.api.http) = {
			post: "/v1/price/attach/item"
			body: "*"
		};
	}	

	// Detach item to a Price
	rpc DetachPriceItem(DetachPriceItemRequest) returns (DetachPriceItemResponse) {
		option (google.api.http) = {
			delete: "/v1/price/detach/item/{price_item_id}"
		};
	}	

	// Attach product to a shop
	rpc AttachProduct(AttachProductRequest) returns (AttachProductResponse) {
		option (google.api.http) = {
			post: "/v1/shop/attach/product"
			body: "*"
		};
	}	

	// Detach product from a shop
	rpc DetachProduct(DetachProductRequest) returns (DetachProductResponse) {
		option (google.api.http) = {
			delete: "/v1/shop/detach/product/{shop_product_id}"
		};
	}
}

// Main entities
enum StackBalancingMethod {
	// Same as the UNBALANCED_CREATE_NEW_STACKS method 
	DEFAULT = 0;

	// Multiple stacks exists and can have varying amounts of items in them.
	// Whenever new items are added it will create new stacks
	UNBALANCED_CREATE_NEW_STACKS = 1;

	// There can be only 1 stack that's not the stack_max_amountj,
	// if there are 2 stack's with less than the stack_max_amount
	// one stack will be reduced till the other fill up till the stack_max_amount.
	// Whenever new items are added it will try to fill up existing stacks till the stack_max_amount.
	BALANCED_FILL_EXISTING_STACKS = 2;
	
	// Multiple stacks exists and can have varying amounts of items in them.
	// Whenever new items are added it will try to fill up existing stacks till the stack_max_amount.
	UNBALANCED_FILL_EXISTING_STACKS = 3;
}

message Item {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	string name = 4;
	bool stackable = 5;
	int64 stack_max_amount = 6;
	StackBalancingMethod stack_balancing_method = 7;
}

message StorageItem {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	Item item = 4;
	int64 amount = 5;
	//google.protobuf.Struct metadata = 3;
}

// If the max_amount is smaller than the min_amount the amount will be the min_amount
// If the min_amount and max_amount are the same that amount will be given
// If max_amount is higher than min_amount a random number between min_amount and max_amount will be chosen
message Amount {
	int64 min_amount = 1;
	int64 max_amount = 2;
}

message Currency {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	string name = 4;
	string short_name = 5;
	string symbol = 6;
}

message StorageCurrency {
	string id = 1;
	Currency currency = 2;
	int64 amount = 3;
}

message Storage {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	string player_id = 4;
	string name = 5;
	repeated StorageItem items = 6;
	repeated StorageCurrency currencies = 7;
	//google.protobuf.Struct metadata = 4;
}

message Player {
	string id = 1;
	string name = 2;
	repeated Storage storages = 3;
}

message Config {
	string key = 1;
	google.protobuf.Value value = 2;
}

message Shop {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	string name = 4;
	repeated Product products = 5;
	google.protobuf.Value metadata = 6;
}

message Product {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	string name = 4;
	repeated ProductItem items = 5;
	repeated ProductCurrency currencies = 6;
	repeated Price prices = 7;	
	google.protobuf.Value metadata = 8;
}

message ProductItem {
	string id = 1;
	Item item = 2;
	int64 amount = 3;
}

message ProductCurrency {
	string id = 1;
	Currency currency = 2;
	int64 amount = 3;
}

message Price {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	google.protobuf.Timestamp updated_at = 3;
	repeated PriceCurrency currencies = 4;
	repeated PriceItem items = 5;
}

message PriceCurrency {
	string id = 1;
	Currency currency = 2;
	int64 amount = 3;
}

message PriceItem {
	string id = 1;
	Item item = 2;
	int64 amount = 3;
}

// CreatePlayer
message CreatePlayerRequest{
	string api = 1;
	string id = 2;
	string name = 3;
}

message CreatePlayerResponse{
	string api = 1;
	Player player = 2;
}

// GiveItem
message GiveItemRequest{
	string api = 1;
	string storage_id = 2;
	string item_id = 3;
	Amount amount = 4;
	// google.protobuf.Struct metadata = 4;
}

message GiveItemResponse{
	string api = 1;
	string storage_id = 2;
	int64 amount = 3;
	// StorageItem item = 3;
}

// DestroyItem
// message DestroyItemRequest{
// 	string api = 1;
// 	string storageItemId = 3;
// }

// message DestroyItemResponse{
// 	string api = 1;
// }

// GetStorage
message GetStorageRequest{
	string api = 1;
	string storage_id = 2;
}

message GetStorageResponse{
	string api = 1;
	Storage storage = 2;
}

// ListStorage
message ListStorageRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListStorageResponse{
	string api = 1;
	repeated Storage storages = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// CreateStorage
message CreateStorageRequest{
	string api = 1;
	string player_id = 2;
	string name = 3;
	// google.protobuf.Struct metadata = 4;
}

message CreateStorageResponse{
	string api = 1;
	Storage storage = 2;
}

// GetPlayer
message GetPlayerRequest{
	string api = 1;
	string player_id = 2;
}

message GetPlayerResponse{
	string api = 1;
	Player player = 2;
}

// ListPlayer
message ListPlayerRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListPlayerResponse{
	string api = 1;
	repeated Player players = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// SearchPlayer
message SearchPlayerRequest{
	string api = 1;
	string query = 2;
	int32 page_size = 3;
	string page_token = 4;
}

message SearchPlayerResponse{
	string api = 1;
	repeated Player players = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// CreateItem
message CreateItemRequest{
	string api = 1;
	string name = 2;
	bool stackable = 3;
	int64 stack_max_amount = 4;
	StackBalancingMethod stack_balancing_method = 5;
	// google.protobuf.Struct metadata = 3;
}

message CreateItemResponse{
	string api = 1;
	Item item = 2;
}

// UpdateItem
message UpdateItemRequest{
	string api = 1;
	string item_id = 2;
	string name = 3;
	// google.protobuf.Struct metadata = 4;
}

message UpdateItemResponse{
	string api = 1;
	Item item = 2;
}

// GetItem
message GetItemRequest{
	string api = 1;
	string item_id = 2;
}

message GetItemResponse{
	string api = 1;
	Item item = 2;
}

// ListItem
message ListItemRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListItemResponse{
	string api = 1;
	repeated Item items = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// SearchItem
message SearchItemRequest{
	string api = 1;
	string query = 2;
	int32 page_size = 3;
	string page_token = 4;
}

message SearchItemResponse{
	string api = 1;
	repeated Item items = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// CreateCurrency
message CreateCurrencyRequest{
	string api = 1;
	string name = 2;
	string short_name = 3;
	string symbol = 4;
	// google.protobuf.Struct metadata = 3;
}

message CreateCurrencyResponse{
	string api = 1;
	Currency currency = 2;
}

// GiveCurrency
message GiveCurrencyRequest{
	string api = 1;
	string storage_id = 2;
	string currency_id = 3;
	Amount amount = 4;
}

message GiveCurrencyResponse{
	string api = 1;
	StorageCurrency currency = 2;
}

// ListCurrency
message ListCurrencyRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListCurrencyResponse{
	string api = 1;
	repeated Currency currencies = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// GetCurrency
message GetCurrencyRequest{
	string api = 1;
	string currency_id = 2;
}

message GetCurrencyResponse{
	string api = 1;
	Currency currency = 2;
}

// GetConfig
message GetConfigRequest{
	string api = 1;
	string key = 2;
}

message GetConfigResponse{
	string api = 1;
	Config config = 2;
}

// SetConfig
message SetConfigRequest{
	string api = 1;
	string key = 2;
	google.protobuf.Value value = 3;
}

// ListConfig
message ListConfigRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListConfigResponse{
	string api = 1;
	repeated Config configs = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

message SetConfigResponse{
	string api = 1;
	Config config = 2;
}

// Authenticate
message AuthenticateRequest{
	string api = 1;
	string email = 2;
	string password = 3;
}

message AuthenticateResponse{
	string api = 1;
	string token = 2;
}

// Register
message RegisterRequest{
	string api = 1;
	string email = 2;
	string password = 3;
}

message RegisterResponse{
	string api = 1;
	string token = 2;
}

// GetShop
message GetShopRequest{
	string api = 1;
	string shop_id = 2;
}

message GetShopResponse{
	string api = 1;
	Shop shop = 2;
}

// CreateShop
message CreateShopRequest{
	string api = 1;
	string name = 2;
	// google.protobuf.Struct metadata = 3;
}

message CreateShopResponse{
	string api = 1;
	Shop shop = 2;
}

// ListShop
message ListShopRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListShopResponse{
	string api = 1;
	repeated Shop shops = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// CreateProduct
message CreateProductRequest{
	string api = 1;
	string name = 2;
	// google.protobuf.Struct metadata = 3;
}

message CreateProductResponse{
	string api = 1;
	Product product = 2;
}

// GetProcuct
message GetProductRequest{
	string api = 1;
	string product_id = 2;
}

message GetProductResponse{
	string api = 1;
	Product product = 2;
}


// ListProduct
message ListProductRequest{
	string api = 1;
	int32 page_size = 2;
	string page_token = 3;
}

message ListProductResponse{
	string api = 1;
	repeated Product products = 2;
	string next_page_token = 3;
	int32 total_size = 4;
}

// AttachItem 
message AttachItemRequest{
	string api = 1;
	string product_id = 2;
	string item_id = 3;
	int64 amount = 4;
	// google.protobuf.Struct metadata = 3;
}

message AttachItemResponse{
	string api = 1;
	Product product = 2;
}

// DetachItem 
message DetachItemRequest{
	string api = 1;
	string product_item_id = 2;
}

message DetachItemResponse{
	string api = 1;
	Product product = 2;
}

// GetPrice
message GetPriceRequest{
	string api = 1;
	string price_id = 2;
}

message GetPriceResponse{
	string api = 1;
	Price price = 2;
}

// CreatePrice
message CreatePriceRequest{
	string api = 1;
	string product_id = 2;
}

message CreatePriceResponse{
	string api = 1;
	Price price = 2;
}

// ListProductPriceRequest
message ListProductPriceRequest{
	string api = 1;
	string product_id = 2;
}

message ListProductPriceResponse{
	string api = 1;
	repeated Price prices = 2;
}

// AttachPriceCurrencyRequest
message AttachPriceCurrencyRequest{
	string api = 1;
	string price_id = 2;
	string currency_id = 3;
	int64 amount = 4;
}

message AttachPriceCurrencyResponse{
	string api = 1;
	Price price = 2;
}

// DetachPriceCurrencyRequest
message DetachPriceCurrencyRequest{
	string api = 1;
	string price_currency_id = 2;
}

message DetachPriceCurrencyResponse{
	string api = 1;
	Price price = 2;
}

// AttachPriceItemRequest
message AttachPriceItemRequest{
	string api = 1;
	string price_id = 2;
	string item_id = 3;
	int64 amount = 4;
}

message AttachPriceItemResponse{
	string api = 1;
	Price price = 2;
}

// DetachPriceItemRequest
message DetachPriceItemRequest{
	string api = 1;
	string price_item_id = 2;
}

message DetachPriceItemResponse{
	string api = 1;
	Price price = 2;
}

// AttachProduct
message AttachProductRequest{
	string api = 1;
	string shop_id = 2;
	string product_id = 3;
}

message AttachProductResponse{
	string api = 1;
	Shop shop = 2;
}

// DetachProduct
message DetachProductRequest{
	string api = 1;
	string shop_product_id = 2;
}

message DetachProductResponse{
	string api = 1;
	Shop shop = 2;
}

// BuyProduct
message BuyProductRequest{
	string api = 1;
	string product_id = 2;
	string price_id = 3;
	string receiving_storage_id = 4;
	string paying_storage_id = 5;
}

message BuyProductResponse{
	string api = 1;
	Product product = 2;
}
